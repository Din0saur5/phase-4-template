#!/usr/bin/env node
const program = require('commander');
const shell = require('shelljs');

program
  .version('1.0.0')
  .description('Create a full-stack project for flatiron phase-4 template');

program
  .command('create <projectName>')
  .description('Create a new full-stack project')
  .action((projectName) => {
    console.log(`Creating ${projectName}...`);
    
    // Step 1: Create the project directory
    shell.exec(`mkdir ${projectName}`);

    // Step 2: Navigate to the project directory
    shell.cd(projectName);
    
    shell.touch('Pipfile')
    shell.ShellString(`
    [[source]]
    url = "https://pypi.org/simple"
    verify_ssl = true
    name = "pypi"

    [packages]
    ipdb = "0.13.9"
    flask = "*"
    flask-sqlalchemy = "3.0.3"
    Werkzeug = "2.2.2"
    flask-migrate = "*"
    sqlalchemy-serializer = "*"
    flask-restful = "*"
    flask-cors = "*"
    faker = "*"

    [requires]
    python_full_version = "3.8.13"
    `).to('Pipfile')
    shell.touch('.gitignore')
    shell.ShellString(`
    .DS_Store
# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-*

# Ignore all logfiles and tempfiles.
/log/*
/tmp/*
!/log/.keep
!/tmp/.keep

# Runtime data
pids
*.pid
*.seed
# Ignore uploaded files in development.
/storage/*
!/storage/.keep
.byebug_history

# Ignore master key for decrypting credentials and more.
/config/master.key

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules
jspm_packages

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Learn-specific .results.json
.results.json

# Ignore bundler config.
/.bundle

# Virtual env metadata
.venv

# pytest cache
.pytest_cache
__pycache__

# database
*.db
instance
.vscode
package-lock.json 
    `).to('.gitignore')
    shell.mkdir('server');
    shell.cd('server');
  

    // Step 4:  python for the back end
   shell.touch('app.py')
   shell.ShellString(`
#!/usr/bin/env python3

# Standard library imports

# Remote library imports
from flask import request
from flask_restful import Resource

# Local imports
from config import app, db, api
# Add your model imports


# Views go here!

@app.route('/')
def index():
    return '<h1>Project Server</h1>'


if __name__ == '__main__':
    app.run(port=5555, debug=True)
   `).to('app.py')
   shell.touch('config.py')
   shell.ShellString(`
# Standard library imports

# Remote library imports
from flask import Flask
from flask_cors import CORS
from flask_migrate import Migrate
from flask_restful import Api
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import MetaData

# Local imports

# Instantiate app, set attributes
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.json.compact = False

# Define metadata, instantiate db
metadata = MetaData(naming_convention={
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
})
db = SQLAlchemy(metadata=metadata)
migrate = Migrate(app, db)
db.init_app(app)

# Instantiate REST API
api = Api(app)

# Instantiate CORS
CORS(app)
   `).to('config.py')
   shell.touch('models.py')
   shell.ShellString(`
   from sqlalchemy_serializer import SerializerMixin
   from sqlalchemy.ext.associationproxy import association_proxy

   from config import db

   # Models go here!
   `).to('models.py')
   shell.touch('seed.py')
   shell.ShellString(`
#!/usr/bin/env python3

# Standard library imports
from random import randint, choice as rc

# Remote library imports
from faker import Faker

# Local imports
from app import app
from models import db

if __name__ == '__main__':
    fake = Faker()
    with app.app_context():
        print("Starting seed...")
        # Seed code goes here!
   `).to('seed.py')
    // Step 7: Navigate back to the project root
    shell.cd('..');
    // Step 8: Set up the front end (React)
    shell.exec('npm create vite@latest client -- --template react');
    shell.exec('npm link client')    
    // Step 9: Navigate to the client directory
    shell.cd('client');
    shell.exec('npm install')
    shell.touch('.gitignore')
    shell.ShellString(`
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
    `)
    shell.touch('.env')
    shell.exec('npm install react-router-dom localforage match-sorter sort-by')
    shell.exec('npm install react-icons --save')
    // Step 10: Add configure file structure
    shell.cd('public')
    shell.rm('./vite.svg')
    shell.touch('_redirects')
    shell.touch('sitemap.xml')
    shell.cd('../src')
    shell.rm('./assets/react.svg')
    shell.mkdir('components')
    shell.cd('components')
    shell.touch('Navbar.css')
    shell.ShellString(`* {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
          }
          
          .navbar {
            background: #19191a;
            height: 80px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.2rem;
           
            top: 0;
            z-index: 999;
          }
          
          .navbar-container {
            display: flex;
            justify-content: space-between;
            height: 80px;
          }
          
          .container {
            z-index: 1;
            width: 100%;
            max-width: 1300px;
            margin-right: auto;
            margin-left: auto;
            padding-right: 50px;
            padding-left: 50px;
          }
          
          .navbar-logo {
            color: #fff;
            justify-self: start;
            cursor: pointer;
            text-decoration: none;
            font-size: 2rem;
            display: flex;
            align-items: center;
          }
          
          .navbar-icon {
            margin-right: 0.5rem;
          }
          
          .nav-menu {
            display: flex;
            align-items: center;
            justify-content: center;
            list-style: none;
            text-align: center;
            justify-content: flex-end;
          }
          
          .nav-item {
            height: 80px;
            border-bottom: 2px solid transparent;
          }
          
          .nav-item:hover {
            border-bottom: 2px solid #09bef0;
          }
          
          .nav-links {
            color: #fff;
            display: flex;
            align-items: center;
            text-decoration: none;
            padding: 0.5rem 1rem;
            height: 100%;
          }
          
          .activated {
            color: #09bef0;
          }
          
          .fa-bars {
            color: #fff;
          }
          
          .menu-icon {
            display: none;
          }
          
          @media screen and (max-width: 960px) {
            nav.navbar{
              position: sticky !important;
            }
            .NavbarItems {
              position: relative;
            }
          
            .nav-menu {
              display: flex;
              flex-direction: column;
              width: 100%;
              position: absolute;
              top: 80px;
              left: -100%;
              opacity: 1;
              transition: all 0.5s ease;
            }
          
            .nav-menu.active {
              background: #19191a;
              left: 0;
              opacity: 1;
              transition: all 0.6s ease;
              z-index: 1;
            }
          
            .nav-links {
              text-align: center;
              padding: 2rem;
              width: 100%;
              display: table;
            }
          
            .nav-links:hover {
              color: #09bef0;
              transform: scale(1.2);
              transition: all 0.3s ease;
            }
          
            .nav-item:hover {
              border: none;
            }
          
            .nav-item {
              width: 100%;
            }
          
            .navbar-logo {
              position: absolute;
              top: 0;
              left: 0;
              transform: translate(25%, 50%);
            }
          
            .menu-icon {
              display: block;
              position: absolute;
              top: 0;
              right: 0;
              transform: translate(-100%, 60%);
              font-size: 1.8rem;
              cursor: pointer;
            }
          }`).to('Navbar.css')
    shell.touch('Navbar.jsx')
    shell.ShellString(`
    import React, {useState} from 'react'
    import { Link } from 'react-router-dom'
    import { NavLink } from 'react-router-dom'
    import "./Navbar.css"
    import {GiAbstract049} from "react-icons/gi" //find a seperate icon for logo
    import {FaBars, FaTimes} from "react-icons/fa"
    import {IconContext} from "react-icons"
    
    
    const Navbar = () => {
      const[click, setClick] = useState(false)
    
      const handleClick = () =>  setClick(!click)
      const closeMobileMenu = () => {setClick(false); window.scrollTo(0, 0)}
        
      
      
      return (
        <>
          <IconContext.Provider value={{color:"#fff"}}>
            <nav className="navbar">
                <div className="navbar-container container">
                    <Link to="/" className='navbar-logo' onClick={closeMobileMenu} style={{'marginBottom': '2%'}}>
                        <GiAbstract049 className='navbar-icon'
                        />
                        Hackworth
                    </Link>
                    <div className="menu-icon" onClick={handleClick}>
                      {click? <FaTimes/>:<FaBars/>}
                    </div>
                    <ul className={click? "nav-menu active": "nav-menu"}>
                      <li className='nav-item'>
                        <NavLink to="/" className={({ isActive }) => "nav-links" + (isActive? " activated": '')} onClick={closeMobileMenu}>
                          Home
                        </NavLink>
                      </li>
                    </ul>
                </div>
            </nav>
          </IconContext.Provider>
        </>
      )
    }
    
    export default Navbar
    `).to('Navbar.jsx')
    shell.cd('..')
    shell.mkdir('routes')
    shell.cd('routes')
    shell.ShellString(`
    import React from 'react'
    import '../App.css';
    

    const Home = () => {
      return (
        <>
          <h1>Hello World</h1>
        </>
      )
    }
    
    export default Home
    ` ).to('Home.jsx')
    shell.ShellString(`

      import { useRouteError } from "react-router-dom";


        export default function ErrorPage() {
        const error = useRouteError();
        console.error(error);
      
        return (
          <div id="error-page">
            <h1>Oops!</h1>
            <p>Sorry, an unexpected error has occurred.</p>
            <p>
              <i>{error.statusText || error.message}</i>
            </p>
          </div>
        );
      }` ).to('ErrorPage.jsx')
    shell.cd('..')
    shell.ShellString(`
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        font-family: "Open Sans", sans-serif;
      }
      
      /*scroll bar fun*/
      /* width */
      ::-webkit-scrollbar {
        width: 10px;
      }
      
      /* Track */
      ::-webkit-scrollbar-track {
        background: #19191a;
      }
      
      /* Handle */
      ::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 10px
      }
      
      /* Handle on hover */
      ::-webkit-scrollbar-thumb:hover {
        background: #555;
      }
      html, body { max-width: 100%; overflow-x: hidden; }
      /* base page*/
      .home{
        display: flex;
        height: 120vh;
        align-items: center;
        justify-content: center;
        font-size: 3rem;
        background-color: #19191a;
        color: #fff;
        overflow-x: hidden;
      }
      @media screen and (max-width: 960px) {
        .home{
          font-size: 2.5rem;
          background-size: cover;
        }
      #error-page {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          width: 100%;
        }
      }
    `).to('App.css')
    shell.ShellString(`
      import * as React from "react";
      import { createRoot } from "react-dom/client";
      import {
        createBrowserRouter,
        RouterProvider
      } from "react-router-dom";
      import Home from "./routes/Home";
      import Navbar from "./components/Navbar";
      import { Outlet } from "react-router-dom";
      import ErrorPage from "./routes/ErrorPage";
      import "./App.css"
      
      const AppLayout = () =>{
      
        return(
          <>
          <Navbar/>
          <Outlet/>
          </>
        )
      }

      const router = createBrowserRouter([
        {
          element: <AppLayout/>,
        errorElement: <ErrorPage/>,
          children:[
            {
              path: "/",
              element: <Home/>
            }
          ]
        }
        
        
      
      ]);
      
      createRoot(document.getElementById("root")).render(
        <RouterProvider router={router} />
      );
    `).to('App.jsx')
    shell.rm('index.css')
    shell.rm('main.jsx')
    shell.ShellString(`
        <!doctype html>
        <!--html lang="en" data-bs-theme="dark"-->
        <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <!--link rel="icon" type="image/png" href="/favicon.png" -->
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>${projectName}</title>
          </head>
          <body>
            <div id="root"></div>
            <script type="module" src="/src/App.jsx"></script>
          </body>
        </html>      
    `).to('index.html')  
    shell.cd('..')    
       








    console.log(`Project ${projectName} created successfully!`);
  });

program.parse(process.argv);

//sudo ln -s /Development/personal/create-PERN-app/create-Hackworth-app.js  /usr/bin/cdha move to path
//sudo chmod +x /usr/bin/cdha
//execute using cdha create <project-name>